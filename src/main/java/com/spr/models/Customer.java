/**
 * This file was generated by the JPA Modeler
 */
package com.spr.models;

import lombok.Getter;
import lombok.Setter;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.*;
import java.io.Serializable;
import java.util.List;

/**
 * @author dzni0816
 */
@Entity
@Getter
@Setter
@Transactional
@Table(name = "customer", schema = "spr")
public class Customer implements Serializable {

    @Column(name = "CustomerId", table = "customer", nullable = false)
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Long customerId;

    @Column(name = "FirstName", table = "customer")
    @Basic
    private String firstName;

    @Column(name = "LastName", table = "customer")
    @Basic
    private String lastName;

    @Column(name = "Contact", table = "customer")
    @Basic
    private String contact;

    @Column(name = "Email", table = "customer")
    @Basic
    private String email;

    @Column(name = "Phone", table = "customer")
    @Basic
    private String phone;

    @Column(name = "UserId", table = "customer")
    @Basic
    private String userId;

    @Column(name = "Username", table = "customer")
    @Basic
    private String username;

    @Column(name = "PassNumber", table = "customer")
    @Basic
    private String passNumber;

    @Column(name = "CountNumber", table = "customer")
    @Basic
    private String countNumber;

    @Column(name = "Location", table = "customer")
    @Basic
    private String location;

    @ManyToOne(targetEntity = Address.class)
    private Address address1;

    @OneToMany(targetEntity = Location.class, mappedBy = "customer", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
    private List<Location> locations;

    @OneToMany(targetEntity = RelatedLocation.class, mappedBy = "customer", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
    private List<RelatedLocation> relatedLocations;

    @OneToMany(targetEntity = Statisticscollector.class, mappedBy = "customer", cascade = CascadeType.REMOVE)
    private List<Statisticscollector> statisticscollectors;

    @OneToMany(targetEntity = So.class, mappedBy = "customer", cascade = CascadeType.REMOVE)
    private List<So> soes;

}
